{"version":3,"sources":["components/Header.js","components/ImageCard.js","ImageArray.js","components/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","message","score","highScore","ImageCard","onClick","handleClick","style","width","cursor","background","concat","image","height","backgroundRepeat","margin","defaultProps","imgArray","id","url","Main","state","clicked","clickedImgages","imageArray","ImageArray","clickedImg","_this","setState","sort","Math","random","includes","resetScore","Object","toConsumableArray","increaseScore","_this2","this","className","map","img","components_ImageCard","key","React","Component","App","console","log","components_Header","CardGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8922dace.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./header.css\";\n\nconst Header = (props) => {\n    return <>\n        <nav>\n            <div>\n                <ul>\n                    <li>\n                       Game of Thrones Clicky Game\n                    </li>\n                    <li>\n                        <span>{props.message}</span>\n                    </li>\n                    <li >\n                        Score: <span>{props.score}</span> | Top Score: <span>{props.highScore}</span>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n        {/* <header className=\"text-center\" >\n            <h3 className=\"\">Clicky Game</h3>\n            <h6 className=\"\">Click on a image to add points, but don't click it again or you will lose points!</h6>\n        </header> */}\n\n    </>\n}\n\nexport default Header;","import React from \"react\";\n\n\n\nconst ImageCard = (props) => {\n\n\n    return <div\n            onClick={() => props.handleClick() }\n\n            style={{\n                width: \"25%\",\n                cursor: \"pointer\",\n                background: `url(${props.image})`,\n                height: \"200px\",\n                backgroundRepeat: \"no-repeat\",\n                margin: \"5px\"\n            }} />\n}\nImageCard.defaultProps = {\n    image: \"\"\n}\nexport default ImageCard;","const imgArray = [\n    {\n        id: 1,\n        url: \"/utils/images/1.jpg\",\n    },\n    {\n        id: 2,\n        url: \"/utils/images/2.jpg\",\n    },\n    {\n        id: 3,\n        url: \"/utils/images/3.jpg\",\n    },\n    {\n        id: 4,\n        url: \"/utils/images/4.jpg\",\n    },\n    {\n        id: 5,\n        url: \"/utils/images/5.jpg\",\n    },\n    {\n        id: 6,\n        url: \"/utils/images/6.jpg\",\n    },\n    {\n        id: 7,\n        url: \"/utils/images/7.jpg\",\n    },\n    {\n        id: 8,\n        url: \"/utils/images/8.jpg\",\n    },\n    {\n        id: 9,\n        url: \"/utils/images/9.jpg\",\n    },\n    {\n        id: 10,\n        url: \"/utils/images/10.jpg\",\n    },\n    {\n        id: 11,\n        url: \"/utils/images/11.jpg\",\n    },\n    {\n        id: 12,\n        url: \"/utils/images/12.jpg\",\n    }\n\n];\nexport default imgArray","import React from \"react\";\nimport ImageCard from \"./ImageCard\";\nimport ImageArray from \"../ImageArray\";\nimport \"./cardGrid.css\"\n\nclass Main extends React.Component {\n    state = {\n        clicked: false,\n        clickedImgages: [],\n        imageArray: ImageArray\n    };\n\n\n    // Handle Clicked image and then push to array or say you've already clicked\n    clickedImg = (id) => {\n        this.setState({imageArray: this.state.imageArray.sort(() => Math.random() - 0.5)});\n\n        if (this.state.clickedImgages.includes(id)) {\n            this.props.resetScore();\n            this.setState({clickedImgages: []});\n        } else {\n            this.setState({clickedImgages: [...this.state.clickedImgages, id]})\n            this.props.increaseScore();\n        }\n    }\n    render() {\n\n\n        return <>\n            <div className=\"container\">\n\n                {this.state.imageArray.map(img => <ImageCard handleClick={() => this.clickedImg(img.id)} key={img.id} image={img.url}/>)}\n                {/* <ImageCard ImageArray={this.state.ImageArray} handleClick={this.clickedImg} /> */}\n            </div>\n        </>\n    }\n}\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Header from \"../src/components/Header\";\nimport CardGrid from \"./components/CardGrid\";\n\n\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    message: \"Click an image to begin! \"\n  }\n\n  increaseScore = () => {\n\n    this.setState({\n      score: this.state.score + 1,\n      message: \"You guessed correctly\",\n      highScore: this.state.score + 1 > this.state.highScore ? this.state.score + 1 : this.state.highScore\n    })\n\n\n\n  }\n  resetScore = () => {\n    this.setState({score: 0, message: \"You guessed incorrectly \"})\n\n  }\n\n  render() {\n    console.log(this.state)\n    return <>\n      <Header score={this.state.score} highScore={this.state.highScore} message={this.state.message}/>\n      <CardGrid increaseScore={this.increaseScore} resetScore={this.resetScore}></CardGrid>\n\n    </>\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}